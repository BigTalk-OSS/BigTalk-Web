{"version":3,"sources":["reportWebVitals.js","logo.svg","utils/GlobalEventListener.js","utils/EventTags.js","contract/ContractMetadata.js","models/Post.js","utils/ShowNotification.js","artifacts/AlertNotification.js","web3js/ContractInterface.js","utils/Helper.js","utils/Intent.js","artifacts/PostCard.js","screens/TimeLine.js","screens/About.js","screens/Profile.js","screens/Doc.js","artifacts/TitleBar.js","screens/MainScreen.js","screens/PostLoadingScreen.js","utils/LoadingPost.js","screens/SplashScreen.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalEventListener","eventType","handler","useEffect","window","addEventListener","removeEventListener","UPDATE_STATUS_EVENT_TAG","UPDATE_STATUS_POST_LOAD_TAG","UPDATE_POST_ID_FETCH_TAG","CONTRACT_ADDRESS","CONTRACT_ABI","inputs","stateMutability","type","anonymous","indexed","internalType","name","outputs","Post","data","this","id","title","body","location","timestamp","author","keywords","ShowNotification","alert","unmountComponentAtNode","document","getElementById","ReactDOM","render","AlertNotification","props","theme","message","interval","state","visible","countdown","timeUntilDismissed","handleTimeChange","bind","clearInterval","setInterval","setState","className","open","React","Component","a","ethereum","dispatchEvent","CustomEvent","detail","web3","Web3","enable","loadContract","contract","console","log","Promise","resolve","loadReadOnlyMode","currentProvider","providers","HttpProvider","eth","Contract","limit","methods","getPostBankIndex","call","postBankIndex","postBank","length","slice","getPost","rawData","post","heading","push","delay","ms","res","setTimeout","Intent","target","element","lastIntentData","reject","PostCard","useState","style","marginBottom","fontSize","opacity","Date","TimeLine","ui","postList","postListView","list","sort","x","y","createPostTimeLineInterface","About","Profile","Doc","block","onClick","TitleBar","homeTabActive","setHomeTabActive","aboutTabActive","setAboutTabActive","profileTabActive","setProfileTabActive","docTabActive","setDocTabActive","updateActiveTab","activeTab","MAIN_CONTEXT_ID","src","logo","alt","tabs","active","MainScreen","PostLoadingScreen","postID","setPostID","status","setStatus","mainLoadingLottieOptions","loop","autoplay","animationData","flatten","loadingAnimation","rendererSettings","preserveAspectRatio","fetchingLottieOptions","fetchingAnimation","options","height","width","animationIn","animationOut","duration","updateAllPostsFromBlockChain","holder","loadPosts","SplashScreen","statusUpdateEvent","_","LoadWeb3","success","catch","e","role","aria-valuenow","aria-valuemin","aria-valuemax","i"],"mappings":"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","file":"static/js/main.5d173030.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect, useCallback} from 'react';\r\n\r\n/**\r\n * Thus function subscribes a component to a particular event change\r\n * @module GlobalEventListener\r\n * @export\r\n * @param {string} eventType - The tag of the event to be subscribed\r\n * @param {function} handler - Callback function\r\n * @constructor\r\n *\r\n * @example\r\n * GlobalEventListener(UPDATE_POST_ID_FETCH_TAG, postIdChangeCallback)\r\n * GlobalEventListener(UPDATE_STATUS_POST_LOAD_TAG, postLoadStatusChangeCallback)\r\n */\r\nexport default function GlobalEventListener(eventType, handler){\r\n    useEffect(() => {\r\n        window.addEventListener(eventType, handler);\r\n        return() => window.removeEventListener(eventType, handler);\r\n    },[eventType])\r\n}\r\n","/**\r\n * This is the tag for Status update event\r\n * @type {string}\r\n */\r\nexport const UPDATE_STATUS_EVENT_TAG = \"STATUS_UPDATE\"\r\n\r\n/**\r\n * This is the tag for Post loading status update event\r\n * @type {string}\r\n */\r\nexport const UPDATE_STATUS_POST_LOAD_TAG = \"POST_LOADING_STATUS\"\r\n\r\n/**\r\n * This is the tag for Post id fetch update event\r\n * @type {string}\r\n */\r\nexport const UPDATE_POST_ID_FETCH_TAG = \"FETCHING_POST_ID\"\r\n","/**\r\n * Address of the contract on BSC chain\r\n * @type {string}\r\n */\r\nexport const CONTRACT_ADDRESS = \"0x17B4660E75C6B6546B4F806cC3453948a435839A\"\r\n\r\n/**\r\n * Contract ABI\r\n * @type {{}}\r\n */\r\nexport const CONTRACT_ABI = [\r\n    {\r\n        inputs: [],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"constructor\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"owner\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"spender\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"value\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"Approval\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"uint256\",\r\n                name: \"id\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"uint256\",\r\n                name: \"post\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"address\",\r\n                name: \"author\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"CommentAdded\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"uint256\",\r\n                name: \"id\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"author\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"PostAdded\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"from\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: true,\r\n                internalType: \"address\",\r\n                name: \"to\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                indexed: false,\r\n                internalType: \"uint256\",\r\n                name: \"value\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"Transfer\",\r\n        type: \"event\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"_admin\",\r\n        outputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                internalType: \"address\",\r\n                name: \"\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"_allowance\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"_balance\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"_decimals\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint8\",\r\n                name: \"\",\r\n                type: \"uint8\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"_name\",\r\n        outputs: [\r\n            {\r\n                internalType: \"string\",\r\n                name: \"\",\r\n                type: \"string\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"_postBank\",\r\n        outputs: [\r\n            {\r\n                internalType: \"string\",\r\n                name: \"_heading\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"string\",\r\n                name: \"_body\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"string\",\r\n                name: \"_location\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"_timeStamp\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                internalType: \"address\",\r\n                name: \"_author\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"_postBankIndex\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"_symbol\",\r\n        outputs: [\r\n            {\r\n                internalType: \"string\",\r\n                name: \"\",\r\n                type: \"string\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"_tokenOwner\",\r\n        outputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"_totalSupply\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"_transactionCharge\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"string\",\r\n                name: \"heading\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"string\",\r\n                name: \"body\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"string\",\r\n                name: \"location\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"string[]\",\r\n                name: \"keywords\",\r\n                type: \"string[]\",\r\n            },\r\n        ],\r\n        name: \"addPost\",\r\n        outputs: [\r\n            {\r\n                internalType: \"bool\",\r\n                name: \"\",\r\n                type: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"_owner\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                internalType: \"address\",\r\n                name: \"_spender\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"allowance\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"remaining\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"_spender\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"_value\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"approve\",\r\n        outputs: [\r\n            {\r\n                internalType: \"bool\",\r\n                name: \"success\",\r\n                type: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"_owner\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        name: \"balanceOf\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"string\",\r\n                name: \"a\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"string\",\r\n                name: \"b\",\r\n                type: \"string\",\r\n            },\r\n        ],\r\n        name: \"compareStrings\",\r\n        outputs: [\r\n            {\r\n                internalType: \"bool\",\r\n                name: \"\",\r\n                type: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"pure\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"decimals\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint8\",\r\n                name: \"\",\r\n                type: \"uint8\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"commentID\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"getComment\",\r\n        outputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"author\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                internalType: \"string\",\r\n                name: \"body\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"vote\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"timestamp\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"getOwner\",\r\n        outputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"indexNumber\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"getPost\",\r\n        outputs: [\r\n            {\r\n                internalType: \"string\",\r\n                name: \"heading\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"string\",\r\n                name: \"body\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"string\",\r\n                name: \"location\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"string[]\",\r\n                name: \"keywords\",\r\n                type: \"string[]\",\r\n            },\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"timestamp\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                internalType: \"address\",\r\n                name: \"author\",\r\n                type: \"address\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"getPostBankIndex\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256[]\",\r\n                name: \"index\",\r\n                type: \"uint256[]\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"postIndex\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"getPostCommentsIndex\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256[]\",\r\n                name: \"index\",\r\n                type: \"uint256[]\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"postIndex\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"isPostExisting\",\r\n        outputs: [\r\n            {\r\n                internalType: \"bool\",\r\n                name: \"\",\r\n                type: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"name\",\r\n        outputs: [\r\n            {\r\n                internalType: \"string\",\r\n                name: \"\",\r\n                type: \"string\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"postIndex\",\r\n                type: \"uint256\",\r\n            },\r\n            {\r\n                internalType: \"string\",\r\n                name: \"comment\",\r\n                type: \"string\",\r\n            },\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"vote\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"postComment\",\r\n        outputs: [\r\n            {\r\n                internalType: \"bool\",\r\n                name: \"success\",\r\n                type: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"symbol\",\r\n        outputs: [\r\n            {\r\n                internalType: \"string\",\r\n                name: \"\",\r\n                type: \"string\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [],\r\n        name: \"totalSupply\",\r\n        outputs: [\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        stateMutability: \"view\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"_to\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"_value\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"transfer\",\r\n        outputs: [\r\n            {\r\n                internalType: \"bool\",\r\n                name: \"success\",\r\n                type: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n    {\r\n        inputs: [\r\n            {\r\n                internalType: \"address\",\r\n                name: \"_from\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                internalType: \"address\",\r\n                name: \"_to\",\r\n                type: \"address\",\r\n            },\r\n            {\r\n                internalType: \"uint256\",\r\n                name: \"_value\",\r\n                type: \"uint256\",\r\n            },\r\n        ],\r\n        name: \"transferFrom\",\r\n        outputs: [\r\n            {\r\n                internalType: \"bool\",\r\n                name: \"success\",\r\n                type: \"bool\",\r\n            },\r\n        ],\r\n        stateMutability: \"nonpayable\",\r\n        type: \"function\",\r\n    },\r\n];\r\n","/**\r\n * Data class for Posts. This class stores the data structure of the posts.\r\n * @export\r\n */\r\nexport class Post{\r\n\r\n    /**\r\n     * This is the constructor for Post class that accepts the Post data.\r\n     *\r\n     * @param {{id:string, title:string, body:string, location:string, timestamp:string, author:string, keywords:string}} data - Post data object\r\n     * @constructor\r\n     * @example\r\n     *\r\n     * let obj = new Post({\r\n     *                  id:\"id\",\r\n     *                  title: \"title\",\r\n     *                  body: \"body\",\r\n     *                  location: \"location\",\r\n     *                  timestamp: \"timestamp\",\r\n     *                  author: \"author\",\r\n     *                  keywords: \"keywords\"})\r\n     *\r\n     * @author amannirala13\r\n     */\r\n    constructor(data) {\r\n        this.id = data.id;\r\n        this.title = data.title;\r\n        this.body= data.body;\r\n        this.location = data.location;\r\n        this.timestamp = data.timestamp;\r\n        this.author = data.author;\r\n        this.keywords = data.keywords;\r\n    }\r\n}\r\n","import {unmountComponentAtNode} from \"react-dom\";\r\nimport ReactDOM from 'react-dom';\r\n\r\n/**\r\n * This function displays notification in the web-app.\r\n * @module ShowNotification\r\n * @method\r\n * @param {AlertNotification} alert - AlterNotification Object that needs to be displayed.\r\n *\r\n * @example\r\n * ShowNotification(<AlertNotification theme={\"danger\"} message={msg}/>);\r\n *\r\n * @see module:AlertNotification\r\n *\r\n * @author amannirala13\r\n */\r\nexport function ShowNotification(alert){\r\n    unmountComponentAtNode(document.getElementById(\"notification-panel\"))\r\n    ReactDOM.render(alert, document.getElementById(\"notification-panel\"))\r\n}\r\n","import React from \"react\";\r\nimport { Alert } from \"shards-react\";\r\n\r\n/**\r\n * This is an Alert Notification component\r\n * @module AlertNotification\r\n * @export\r\n * @returns {JSX.Element}\r\n *\r\n */\r\nexport default class AlertNotification extends React.Component {\r\n    /**\r\n     *  This is the constructor for the Alert Notification class\r\n     *  @constructor\r\n     *  @param props\r\n     *  @property {string} theme - Theme of the notification. [\"primary\", \"secondary\", \"info\", \"danger\", \"warning\", \"success\", \"light\", \"dark\"\r\n     *  @property {string} message - Message to display in the notification.\r\n     *\r\n     *  @example\r\n     *  <div>\r\n     * <AlertNotification theme={\"warning\"} message={\"Launching in read-only mode\"}/>\r\n     * </div>\r\n     * @author amannirala13\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.theme = props.theme\r\n        this.message = props.message\r\n        this.interval = null;\r\n        this.state = {\r\n            visible: true,\r\n            countdown: 0,\r\n            timeUntilDismissed: 5\r\n        };\r\n\r\n        this.handleTimeChange = this.handleTimeChange.bind(this);\r\n        this.clearInterval = this.clearInterval.bind(this);\r\n\r\n        this.clearInterval();\r\n        this.interval = setInterval(this.handleTimeChange, 1000);\r\n    }\r\n\r\n    handleTimeChange() {\r\n        if (this.state.countdown < this.state.timeUntilDismissed - 1) {\r\n            this.setState({\r\n                ...this.state,\r\n                ...{ countdown: this.state.countdown + 1 }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({ ...this.state, ...{ visible: false } });\r\n        this.clearInterval();\r\n    }\r\n\r\n    clearInterval() {\r\n        clearInterval(this.interval);\r\n        this.interval = null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Alert className=\"mb-3\" open={this.state.visible} theme={this.theme}>\r\n                    <span>{this.message}</span>\r\n                </Alert>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {UPDATE_STATUS_EVENT_TAG, UPDATE_POST_ID_FETCH_TAG, UPDATE_STATUS_POST_LOAD_TAG} from \"../utils/EventTags\";\r\nimport Web3 from \"web3\";\r\nimport {CONTRACT_ABI, CONTRACT_ADDRESS} from \"../contract/ContractMetadata\";\r\nimport {Post} from \"../models/Post\";\r\nimport {ShowNotification} from \"../utils/ShowNotification\";\r\nimport AlertNotification from \"../artifacts/AlertNotification\";\r\n\r\n/**\r\n * This function loads the web3 provider, asks for connection, connects to the contract and prepares everything before loading the web-app\r\n * @returns {Promise<string>}\r\n * @async\r\n * @method\r\n * @example\r\n * loadWeb3().then((r)=>{\r\n *     console.log(r)\r\n * }).catch((e)=>{\r\n *     console.log(e)\r\n * })\r\n *\r\n * @see loadReadOnlyMode\r\n */\r\nexport async function LoadWeb3() {\r\n    if (window.ethereum) {\r\n        window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Waiting for approval\"}))\r\n        window.web3 = new Web3(window.ethereum);\r\n        try{\r\n            await window.ethereum.enable();\r\n            window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Loading contract\"}))\r\n            window.contract = await loadContract();\r\n            console.log(\"Contract loaded!\");\r\n            console.log(window.contract);\r\n            window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Welcome\"}))\r\n            return Promise.resolve(\"Done\");\r\n        }catch(e){\r\n            console.log(e);\r\n            window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Permission Denied\"}))\r\n            await loadReadOnlyMode()\r\n        }\r\n    }\r\n    else if(window.web3){\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n        window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Loading contract\"}))\r\n        window.contract = await loadContract();\r\n        console.log(\"Contract loaded!\");\r\n        console.log(window.contract);\r\n        window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Welcome\"}))\r\n        return Promise.resolve(\"Done\");\r\n    }\r\n    else{\r\n        await loadReadOnlyMode();\r\n        return Promise.resolve(\"Done\");\r\n    }\r\n}\r\n\r\n/**\r\n * This function loads the web-app in read-only mode when the web3 provider is missing from the browser.\r\n * @returns {Promise<string>}\r\n * @async\r\n * @example\r\n * await loadReadOnlyMode();\r\n */\r\nasync function loadReadOnlyMode(){\r\n    window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Connecting to node\"}));\r\n    window.web3 = await new Web3(new Web3.providers.HttpProvider(\"https://data-seed-prebsc-2-s1.binance.org:8545/\"));\r\n    window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Loading contract\"}));\r\n    window.contract = await loadContract();\r\n    window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Welcome\"}));\r\n    ShowNotification(<AlertNotification theme={\"warning\"} message={\"Launching in read-only mode\"}/>);\r\n    console.log(\"We can't detect Metamask or any wallet provider in this browser! Launching in Read-only mode!\");\r\n    await alert(\"We can't detect Metamask or any wallet provider on this browser. Without that you will only be able to read articles but can not comment or add new posts.\");\r\n    return Promise.resolve(\"Done\");\r\n}\r\n\r\n/**\r\n * This function returns the contract after loading it\r\n * @async\r\n * @returns {Promise<*>}\r\n *\r\n * @example\r\n * window.contract = await loadContract();\r\n */\r\nasync function loadContract(){\r\n    return await new window.web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n}\r\n\r\n/**\r\n * This function loads post data from the contract to the global variables.\r\n * @async\r\n * @param {number} limit - The number of posts you want to load. 0 or <0 will fetch all the posts.\r\n * @returns {Promise<string>}\r\n *\r\n * @example\r\n * let list = loadPosts(5)\r\n * //returns top 5 latest posts\r\n *\r\n * let list2 = loadPosts()\r\n * //returns all the posts\r\n *\r\n * let list3 = loadPosts(-1)\r\n * //returns all the posts\r\n *\r\n * @see Post\r\n */\r\nexport async function loadPosts(limit=-1) {\r\n    window.dispatchEvent(new CustomEvent(UPDATE_STATUS_POST_LOAD_TAG, {detail: \"Loading index\"}))\r\n    window.postBankIndex = await window.contract.methods.getPostBankIndex().call();\r\n    window.dispatchEvent(new CustomEvent(UPDATE_STATUS_POST_LOAD_TAG, {detail: \"Loading posts\"}))\r\n    window.postBank = [];\r\n\r\n    if(limit<0) limit = window.postBankIndex.length\r\n\r\n    for(let id of window.postBankIndex.slice(window.postBankIndex.length - limit, window.postBankIndex.length)){\r\n        window.dispatchEvent(new CustomEvent(UPDATE_POST_ID_FETCH_TAG, {detail: id}))\r\n\r\n        let rawData = await window.contract.methods.getPost(id).call();\r\n        let post = new Post({id: id,\r\n            title: rawData.heading,\r\n            body: rawData.body,\r\n            location: rawData.location,\r\n            timestamp: rawData.timestamp,\r\n            author: rawData.author})\r\n\r\n        window.postBank.push(post);\r\n    }\r\n\r\n    console.log(window.postBankIndex);\r\n    console.log(window.postBank);\r\n\r\n    window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Done\"}))\r\n    return Promise.resolve(\"Done\");\r\n}\r\n\r\n/**\r\n * This function loads post data from the contract and passes it from the promise\r\n * @async\r\n * @param {number} limit - The number of posts you want to load. 0 or <0 will fetch all the posts.\r\n * @returns {Promise<string>}\r\n *\r\n * @example\r\n * getPosts(5).then({list}=>{\r\n *     console.log(e);\r\n * })\r\n * //returns top 5 latest posts\r\n *\r\n * getPosts().then({list}=>{\r\n *     console.log(e);\r\n * })\r\n * //returns all the posts\r\n *\r\n * getPosts(-1).then({list}=>{\r\n *     console.log(e);\r\n * })\r\n * //returns all the posts\r\n * @returns {Promise<Post[]>}\r\n *\r\n * @see Post\r\n */\r\nexport async function getPosts(limit=-1) {\r\n    window.dispatchEvent(new CustomEvent(UPDATE_STATUS_POST_LOAD_TAG, {detail: \"Loading index\"}))\r\n    let postBankIndex = await window.contract.methods.getPostBankIndex().call();\r\n    window.dispatchEvent(new CustomEvent(UPDATE_STATUS_POST_LOAD_TAG, {detail: \"Loading posts\"}))\r\n    let postBank = [];\r\n\r\n    if(limit<0) limit = postBankIndex.length\r\n\r\n    for(let id of postBankIndex.slice(postBankIndex.length - limit, postBankIndex.length)){\r\n        window.dispatchEvent(new CustomEvent(UPDATE_POST_ID_FETCH_TAG, {detail: id}))\r\n\r\n        let rawData = await window.contract.methods.getPost(id).call();\r\n        let post = new Post({id:id,\r\n            title: rawData.heading,\r\n            body: rawData.body,\r\n            location: rawData.location,\r\n            timestamp: rawData.timestamp,\r\n            author: rawData.author})\r\n\r\n        postBank.push(post);\r\n    }\r\n\r\n    console.log(window.postBankIndex);\r\n    console.log(window.postBank);\r\n\r\n    window.dispatchEvent(new CustomEvent(UPDATE_STATUS_EVENT_TAG, {detail: \"Done\"}))\r\n    return Promise.resolve(postBank);\r\n}\r\n\r\n","/**\r\n * This function is for delaying the code for a while.\r\n * @param {number} ms - Time to delay in milliseconds\r\n * @returns {Promise<unknown>}\r\n *\r\n * @example\r\n * delay(3000)\r\n * //  Code delays for 3 seconds\r\n *\r\n * @author amannirala13\r\n */\r\nexport const delay = ms => new Promise(res => setTimeout(res, ms));\r\n\r\n/**\r\n * Thus function is used to sort post list according to the timestamp in \"descending\" order.\r\n * @param {Post[]} list - List of all the posts\r\n * @returns {Post[]}\r\n *\r\n * @example\r\n * let sortedList = sortByNewTimeStampFirst(list)\r\n * // returns sorted list by timestamp\r\n *\r\n * @see Post\r\n */\r\nexport function sortByNewTimeStampFirst(list){\r\n    list.sort(function(x, y){\r\n        return y.timestamp - x.timestamp;\r\n    })\r\n    return list;\r\n}\r\n","import {unmountComponentAtNode} from \"react-dom\";\r\nimport ReactDOM from 'react-dom';\r\nimport React from 'react';\r\n\r\n/**\r\n * This function is used to load an element in a holder element and also set some data which can be later used.\r\n * @param {Element} target - The holder i.e. the element in which the new element will be loaded\r\n * @param {JSX.Element} element - The element that will be loaded\r\n * @param {*} data - The data that will be loaded for later use\r\n * @returns {Promise<boolean>}\r\n *\r\n * @example\r\n * Intent(document.getElementById('root'), <SplashScreen statusUpdateEvent={UpdateStatusEventTag}/>)\r\n * .then((r)=>{console.log(r)});\r\n *\r\n * @see getLastIntentData\r\n */\r\nexport async function Intent(target, element, data=null){\r\n    try{\r\n        unmountComponentAtNode(target)\r\n        ReactDOM.render(element,target)\r\n        window.lastIntentData = data;\r\n        return Promise.resolve(true);\r\n    }catch(e){\r\n        return Promise.reject(e);\r\n    }\r\n}\r\n\r\n/**\r\n * This function is to get the last data that was passed in the intent.\r\n * @returns {*}\r\n *\r\n * @example\r\n * let data = getLastIntentData()\r\n *\r\n * @see Intent\r\n */\r\nexport function getLastIntentData(){\r\n    return window.lastIntentData;\r\n}\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { Card, CardBody, CardTitle, CardSubtitle } from \"shards-react\";\r\nimport './style/PostCard.css'\r\n\r\n/**\r\n * This is the postcard component. These cards are used to render post details.\r\n * @module PostCard\r\n * @export\r\n * @param props\r\n * @property {Post} post - The post of which the data is to be loaded\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n *\r\n * @example\r\n * <div>\r\n * <PostCard post={postObject}/>\r\n *</div>\r\n *\r\n * @see Post\r\n *\r\n * @author amannirala13\r\n */\r\n\r\nexport default function PostCard(props){\r\n    const [post, setPost] = useState(props.post);\r\n\r\n    return(\r\n            <Card  id={\"post-card-holder\"} style={{marginBottom: \"2%\"}}>\r\n                <CardBody>\r\n                    <CardTitle id={\"post-card-title\"}>{post.title}</CardTitle>\r\n                    <CardSubtitle id={\"post-card-location\"}>{post.location}</CardSubtitle>\r\n                    <br/>\r\n                    <span>{post.body}</span>\r\n                    <br/><br/>\r\n                    <span style={{fontSize: \"x-small\", opacity: \"0.5\" }}>By {post.author}</span><br/>\r\n                    <span  style={{fontSize: \"x-small\", opacity: \"0.5\" }}>{Date(post.timestamp)}</span>\r\n                </CardBody>\r\n            </Card>\r\n    );\r\n}\r\n","import PostCard from \"../artifacts/PostCard\";\r\nimport './style/TimeLine.css'\r\nimport {sortByNewTimeStampFirst} from \"../utils/Helper\";\r\n\r\n/**\r\n * This is the timeline component of the web-app. It contains the list of all the post. It's also the home page.\r\n * @module TimeLine\r\n * @export\r\n * @returns {JSX.Element}\r\n * @constructor\r\n *\r\n * @example\r\n * <div>\r\n *     <TimeLine/>\r\n * </div>\r\n *\r\n * @see PostCard\r\n * @see Post\r\n */\r\nexport default function TimeLine(){\r\n\r\n    /**\r\n     * This variable contains the array of PostCard elements for each post\r\n     * @type {PostCard[]}\r\n     *\r\n     * @see PostCard\r\n     * @see Post\r\n     */\r\n    let ui = createPostTimeLineInterface(window.postBank);\r\n\r\n    return (\r\n        <div id={\"timeline-holder\"}>\r\n            <div id={\"timeline-post-holder\"}>\r\n                {ui}\r\n            </div>\r\n            <div id={\"timeline-filter-options\"}>\r\n                <span id={\"recommended-topics-title\"}>Recommended Topics</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * This function generates and returns the PostCard list for all the posts in the list\r\n * @param {Post[]} postList - Array of posts\r\n * @returns {PostCard[]} - Array of PostCard elements\r\n *\r\n * @see PostCard\r\n * @see Post\r\n *\r\n * @example\r\n * let ui = createPostTimeLineInterface(window.postBank);\r\n */\r\nexport function createPostTimeLineInterface(postList){\r\n    let postListView = [];\r\n    postList = sortByNewTimeStampFirst(postList);\r\n    for(let post of postList){\r\n        postListView.push(<PostCard post={post}/>)\r\n    }\r\n    return postListView\r\n}\r\n","import React from \"react\";\r\n\r\n/**\r\n * This is the about us screen component\r\n * @returns {JSX.Element}\r\n * @constructor\r\n *\r\n * @example\r\n * <div>\r\n *     <About/>\r\n *     </div>\r\n */\r\nexport default function About(){\r\n    return(\r\n        <div>\r\n            About US!\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\n/**\r\n * This is the profile details component\r\n * @returns {JSX.Element}\r\n * @constructor\r\n *\r\n * @example\r\n * <div>\r\n *     <Profile/>\r\n *     </div>\r\n */\r\nexport default function Profile(){\r\n    return(\r\n        <div>\r\n            Profile!\r\n        </div>\r\n    );\r\n}\r\n","import { Button } from \"shards-react\";\r\nimport React from \"react\";\r\nimport './style/Doc.css'\r\n\r\n/**\r\n * This is the documentation page\r\n * @returns {JSX.Element}\r\n * @constructor\r\n *\r\n * @example\r\n * <div>\r\n *     <Doc/>\r\n *     </div>\r\n */\r\nexport default function Doc(){\r\n    return(\r\n        <div id={\"doc-parent-holder\"}>\r\n            <Button block onClick={()=>{\r\n                window.open(\"https://bigtalk-oss.github.io/BigTalk-Web-Doc/\", \"_blank\")\r\n            }}> View Documentation </Button>\r\n        </div>\r\n    );\r\n}\r\n","import logo from '../logo.svg'\r\nimport './style/TitleBar.css'\r\nimport React, {useState, useEffect, useCallback} from 'react';\r\nimport { Nav, NavItem, NavLink } from \"shards-react\";\r\nimport {Intent} from \"../utils/Intent\";\r\nimport {MAIN_CONTEXT_ID} from \"../screens/MainScreen\";\r\nimport TimeLine from \"../screens/TimeLine\";\r\nimport About from \"../screens/About\";\r\nimport Profile from \"../screens/Profile\";\r\nimport Doc from \"../screens/Doc\";\r\n\r\n/**\r\n * This is the title bar component of the web-app\r\n * @module TitleBar\r\n * @returns {JSX.Element}\r\n * @constructor\r\n *\r\n * @example\r\n * <div>\r\n *  <TitleBar/>\r\n * </div\r\n *\r\n * @author amannirala13\r\n */\r\nexport default function TitleBar(props){\r\n\r\n    const [homeTabActive, setHomeTabActive] = useState(true);\r\n    const [aboutTabActive, setAboutTabActive] = useState(false);\r\n    const [profileTabActive, setProfileTabActive] = useState(false);\r\n    const [docTabActive, setDocTabActive] = useState(false);\r\n\r\n    /**\r\n     * This function updates the tabs active status\r\n     * @param {string} activeTab - The tab name that needs to be activated\r\n     */\r\n    const updateActiveTab = (activeTab) =>{\r\n        switch (activeTab){\r\n            case 'home':\r\n                setHomeTabActive(true)\r\n                setAboutTabActive(false)\r\n                setProfileTabActive(false)\r\n                setDocTabActive(false)\r\n\r\n                Intent(document.getElementById(MAIN_CONTEXT_ID), <TimeLine/>).then()\r\n\r\n                break;\r\n            case 'about':\r\n                setHomeTabActive(false)\r\n                setAboutTabActive(true)\r\n                setProfileTabActive(false)\r\n                setDocTabActive(false)\r\n\r\n                Intent(document.getElementById(MAIN_CONTEXT_ID), <About/>).then()\r\n\r\n                break;\r\n\r\n            case 'profile':\r\n                setHomeTabActive(false)\r\n                setAboutTabActive(false)\r\n                setProfileTabActive(true)\r\n                setDocTabActive(false)\r\n\r\n                Intent(document.getElementById(MAIN_CONTEXT_ID), <Profile/>).then()\r\n\r\n                break;\r\n\r\n            case 'doc':\r\n                setHomeTabActive(false)\r\n                setAboutTabActive(false)\r\n                setProfileTabActive(false)\r\n                setDocTabActive(true)\r\n\r\n                Intent(document.getElementById(MAIN_CONTEXT_ID), <Doc/>).then()\r\n\r\n                break;\r\n\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={\"title-bar-container\"}>\r\n            <div className={\"branding-container\"}>\r\n                <img className={\"logo\"} src={logo} alt={\"app_logo\"}/>\r\n                <span className={\"name\"}><strong>Big Talk</strong></span>\r\n            </div>\r\n\r\n            <div className={\"right-container\"}>\r\n                <Nav tabs>\r\n                    <NavItem>\r\n                        <NavLink active={homeTabActive} onClick={()=>{updateActiveTab('home')}}>\r\n                            Home\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink active={aboutTabActive} onClick={()=>{updateActiveTab('about')}}>\r\n                            About\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink active={profileTabActive} onClick={()=>{updateActiveTab('profile')}}>\r\n                            Profile\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink active={docTabActive} onClick={()=>{updateActiveTab('doc')}}>\r\n                            Doc\r\n                        </NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport TitleBar from \"../artifacts/TitleBar\";\r\nimport './style/MainScreen.css'\r\n\r\n/**\r\n * DOM id of the main holder for all screen components that will be rendered in web-app.\r\n * @type {string}\r\n * @export\r\n */\r\nexport const MAIN_CONTEXT_ID = 'main-context';\r\n\r\n/**\r\n * This is the main screen component containing the main holder and the title bar.\r\n * @module MainScreen\r\n * @export\r\n * @returns {JSX.Element}\r\n * @constructor\r\n *\r\n * @example\r\n * <div>\r\n * <MainScreen/>\r\n * </div>\r\n *\r\n * @author amannirala13\r\n */\r\nexport default function MainScreen(){\r\n\r\n    return(\r\n        <div id={\"main-container\"}>\r\n            <TitleBar id={\"main-title-bar\"}/>\r\n            <div id={MAIN_CONTEXT_ID}/>\r\n        </div>\r\n    )\r\n}\r\n","import Lottie from 'react-lottie';\r\nimport loadingAnimation from '../raw/loading.json'\r\nimport fetchingAnimation from '../raw/fetching.json'\r\nimport React, {useState, useEffect, useCallback} from 'react';\r\nimport { AnimateOnChange } from 'react-animation'\r\nimport './style/PostLoadingScreen.css'\r\nimport GlobalEventListener from \"../utils/GlobalEventListener\";\r\nimport {UPDATE_POST_ID_FETCH_TAG, UPDATE_STATUS_POST_LOAD_TAG} from \"../utils/EventTags\";\r\nimport {flatten} from \"lottie-colorify\";\r\n\r\n/**\r\n * This is the post loading screen. This post needs to be displayed whenever the posts are being loaded from the contract.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n *\r\n * @example\r\n * ReactDOM.render(<PostLoadingScreen/>,domHolder);\r\n *\r\n * or\r\n *\r\n * <div>\r\n *     <PostLoadingScreen/>\r\n * </div>\r\n *\r\n * @author amannirala13\r\n */\r\nexport function PostLoadingScreen(){\r\n\r\n    const [postID, setPostID] = useState(\". . .\")\r\n    const [status, setStatus] = useState(\"Please wait\")\r\n\r\n    /**\r\n     * This function is a callback to change post id to the currently loading post\r\n     * @param data - Event data details containing the post id\r\n     *\r\n     * @see Post\r\n     * @see UPDATE_POST_ID_FETCH_TAG\r\n     */\r\n    const postIdChangeCallback = (data) =>{\r\n        setPostID(data.detail);\r\n    }\r\n\r\n    /**\r\n     * This function is a callback to status change event of the Post locating screen\r\n     * @param data - Event details containing the status message\r\n     *\r\n     * @see Post\r\n     * @see UPDATE_STATUS_POST_LOAD_TAG\r\n     */\r\n    const postLoadStatusChangeCallback = (data) =>{\r\n        setStatus(data.detail)\r\n    }\r\n\r\n    /**\r\n     * Subscribing to global events\r\n     * @see GlobalEventListener\r\n     */\r\n    GlobalEventListener(UPDATE_POST_ID_FETCH_TAG, postIdChangeCallback)\r\n    GlobalEventListener(UPDATE_STATUS_POST_LOAD_TAG, postLoadStatusChangeCallback)\r\n\r\n    /**\r\n     * Loading progress lottie animation render options\r\n     * @type {{animationData: any, loop: boolean, rendererSettings: {preserveAspectRatio: string}, autoplay: boolean}}\r\n     *\r\n     * @see Lottie\r\n     * @see flatten\r\n     * @see loadingAnimation\r\n     */\r\n    const mainLoadingLottieOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: flatten('#000000',loadingAnimation),\r\n        rendererSettings: {\r\n            preserveAspectRatio: 'xMidYMid slice'\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetching post lottie animation render options\r\n     * @type {{animationData: any, loop: boolean, rendererSettings: {preserveAspectRatio: string}, autoplay: boolean}}\r\n     *\r\n     * @see Lottie\r\n     * @see flatten\r\n     * @see fetchingAnimation\r\n     */\r\n    const fetchingLottieOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: flatten('#000000',fetchingAnimation),\r\n        rendererSettings: {\r\n            preserveAspectRatio: 'xMidYMid slice'\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id={\"loading-main-container\"}>\r\n            <Lottie\r\n                options={mainLoadingLottieOptions}\r\n                height={57}\r\n                width={57}/>\r\n            <span style={{fontSize:\"large\"}}>{status}</span>\r\n            <div id={\"fetching-container\"}>\r\n                    <div>\r\n                        <Lottie\r\n                            options={fetchingLottieOptions}\r\n                            height={57}\r\n                            width={57}/>\r\n                        <span id={'fetching-post-id-text'}><strong>Fetching</strong> <AnimateOnChange animationIn={\"popIn\"} animationOut={\"popOut\"} duration={150}>\r\n                             {postID}\r\n                        </AnimateOnChange>\r\n                        </span>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import ReactDOM, {unmountComponentAtNode} from \"react-dom\";\r\nimport {getPosts, loadPosts} from \"../web3js/ContractInterface\";\r\nimport {Intent} from \"./Intent\";\r\nimport {MAIN_CONTEXT_ID} from \"../screens/MainScreen\";\r\nimport React from \"react\";\r\nimport {PostLoadingScreen} from \"../screens/PostLoadingScreen\";\r\n\r\n\r\n/**\r\n * This function loads all the post data from the contract to the client. Call this function to update all the post data\r\n * @param {Element} holder - The main holder element\r\n * @param {JSX.Element} target - The element to render post rendering\r\n * @param {limit} limit - The number of posts you want to load\r\n *\r\n * @example\r\n * updateAllPostsFromBlockChain(document.getElementById(MAIN_CONTEXT_ID), <TimeLine/>);\r\n * //updates all the posts in the client\r\n *\r\n * or\r\n *\r\n * updateAllPostsFromBlockChain(document.getElementById(MAIN_CONTEXT_ID), <TimeLine/>, 5);\r\n * //updates 5 latest posts in the client.\r\n */\r\n\r\nexport function updateAllPostsFromBlockChain(holder, target, limit){\r\n    unmountComponentAtNode(holder);\r\n    ReactDOM.render(\r\n        <PostLoadingScreen/>\r\n        ,holder\r\n    );\r\n\r\n    loadPosts(limit)\r\n        .then(()=>{Intent(document.getElementById(MAIN_CONTEXT_ID), target)\r\n            .then()});\r\n\r\n}\r\n\r\n/**\r\n * This function fetches data of all the posts in the limit range and passes to the target via intent.\r\n * @param {Element} holder - The main holder element\r\n * @param {JSX.Element} target - The element to render post rendering\r\n * @param {limit} limit - The number of posts you want to load\r\n *\r\n *\r\n * @example\r\n * getPostsFromBlockChain(document.getElementById(MAIN_CONTEXT_ID), <TimeLine/>);\r\n * //Get all the posts in the client and pass it to the intent\r\n *\r\n * or\r\n *\r\n * getPostsFromBlockChain(document.getElementById(MAIN_CONTEXT_ID), <TimeLine/>, 5);\r\n * // Get 5 latest posts in the client and pass it to the intent\r\n */\r\n\r\nexport function getPostsFromBlockChain(holder, target, limit){\r\n    unmountComponentAtNode(holder);\r\n    ReactDOM.render(\r\n        <PostLoadingScreen/>\r\n        ,holder\r\n    );\r\n\r\n    getPosts(limit)\r\n        .then((postsList)=>{Intent(document.getElementById(MAIN_CONTEXT_ID), target, postsList)\r\n            .then()});\r\n\r\n}\r\n\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport './style/SplashScreen.css'\r\nimport logo from '../logo.svg'\r\nimport GlobalEventListener from \"../utils/GlobalEventListener\";\r\nimport {LoadWeb3} from \"../web3js/ContractInterface\";\r\nimport {delay} from \"../utils/Helper\";\r\nimport {Intent} from \"../utils/Intent\";\r\nimport MainScreen, {MAIN_CONTEXT_ID} from \"./MainScreen\";\r\nimport {ShowNotification} from \"../utils/ShowNotification\";\r\nimport AlertNotification from \"../artifacts/AlertNotification\";\r\nimport { AnimateOnChange } from 'react-animation'\r\nimport {updateAllPostsFromBlockChain} from \"../utils/LoadingPost\";\r\nimport TimeLine from \"./TimeLine\";\r\n\r\n/**\r\n * Initial loading screen of the web-app. Also the interface that should be active while any Web3 authorizations are taking place.\r\n * @module SplashScreen\r\n * @export\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor\r\n *\r\n * @example\r\n * <div>\r\n * <Splashscreen/>\r\n * </div>\r\n *\r\n * @author amannirala13\r\n */\r\nexport default function SplashScreen(props){\r\n\r\n    let [status, setStatus] = useState(\"Loading\")\r\n\r\n    /**\r\n     * This functions updates the status text in SplashScreen on event dispatch\r\n     * @param data - Data from the event. The `data.detail` object in the event must have the new status text.\r\n     */\r\n    const updateStatus = (data) =>{\r\n        console.log(data);\r\n        setStatus(data.detail);\r\n    }\r\n\r\n    /**\r\n     * Subscribing to Web3 update event using GlobalEventListener\r\n     * @see GlobalEventListener\r\n     */\r\n    GlobalEventListener(props.statusUpdateEvent, updateStatus);\r\n\r\n\r\n    /**\r\n     * Once the webpage is loaded, the web-app loads the MainScreen with is the parent holder of all the other components\r\n     * or display a message notification if the loading fails for any reason.\r\n     * @see updateAllPostsFromBlockChain\r\n     * @see module:ShowNotification\r\n     */\r\n    window.addEventListener('load', _ => {\r\n        LoadWeb3()\r\n            .then(async ()=>{\r\n            await delay(5000);\r\n            Intent(document.getElementById('root'), <MainScreen/>)\r\n                .then((success) => {\r\n                    if (success)\r\n                        updateAllPostsFromBlockChain(document.getElementById(MAIN_CONTEXT_ID), <TimeLine/>);\r\n                })\r\n                .catch((e)=>{\r\n                ShowNotification(<AlertNotification theme={\"danger\"} message={e}/>);\r\n                console.log(e);\r\n                });\r\n            })\r\n            .catch((e)=>{\r\n            ShowNotification(<AlertNotification theme={\"danger\"} message={e}/>);\r\n                console.log(e);\r\n            });\r\n    })\r\n\r\n\r\n    return(\r\n        <div className=\"SplashScreen-content\">\r\n        <img id=\"SplashScreen-logo\" src={logo} alt=\"app-logo\"/>\r\n        <br/><br/>\r\n        <div className=\"progress\">\r\n            <div className=\"progress-bar progress-bar-striped progress-bar-animated\"\r\n                 id=\"SplashScreen-progress\"\r\n                 role=\"progressbar\" aria-valuenow=\"75\"\r\n                 aria-valuemin=\"0\" aria-valuemax=\"100\"/>\r\n        </div> <br/>\r\n        <AnimateOnChange animationIn={\"popIn\"} animationOut={\"popOut\"}>\r\n            <span id=\"SplashScreen-status\">{status}</span>\r\n        </AnimateOnChange>\r\n    </div>)\r\n}\r\n","import React from 'react';\nimport './style/index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SplashScreen from \"./screens/SplashScreen\";\nimport {UPDATE_STATUS_EVENT_TAG} from \"./utils/EventTags\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\nimport {Intent} from \"./utils/Intent\";\n\nIntent(document.getElementById('root'), <SplashScreen statusUpdateEvent={UPDATE_STATUS_EVENT_TAG}/>)\n    .then();\nreportWebVitals((i) => {console.log(i)});\n"],"sourceRoot":""}